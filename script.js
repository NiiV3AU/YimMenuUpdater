function toggleAccordion(headerElement){const contentElement=headerElement.nextElementSibling;const parentItem=headerElement.parentElement;if(!contentElement||!(contentElement.classList.contains("changelog-details")||contentElement.classList.contains("faq-answer"))){console.error("Accordion content not found for:",headerElement);return}if(!parentItem||!(parentItem.classList.contains("changelog-item")||parentItem.classList.contains("faq-item"))){console.warn("Accordion parent item not found for:",headerElement)}const isCollapsed=contentElement.classList.contains("collapsed");contentElement.style.willChange="max-height, opacity, padding";const cleanupAnimation=(event)=>{if(event.target===contentElement){contentElement.style.willChange="auto"}};contentElement.removeEventListener("transitionend",cleanupAnimation);contentElement.addEventListener("transitionend",cleanupAnimation,{once:true});requestAnimationFrame(()=>{if(isCollapsed){contentElement.classList.remove("collapsed");if(parentItem){parentItem.classList.add("is-open")}}else{contentElement.classList.add("collapsed");if(parentItem){parentItem.classList.remove("is-open")}}})}document.addEventListener("DOMContentLoaded",()=>{const langToggleButton=document.getElementById("lang-toggle-btn");const translatableElements=document.querySelectorAll("[data-translate]");const htmlElement=document.documentElement;const setLanguage=(lang)=>{translatableElements.forEach((element)=>{const textKey=lang==="en"?"langEn":"langDe";if(element.dataset[textKey]){element.textContent=element.dataset[textKey]}});htmlElement.setAttribute("lang",lang);if(langToggleButton){if(lang==="en"){langToggleButton.innerHTML="&#127482;&#127480;";langToggleButton.classList.add("show-us-flag-bg");langToggleButton.classList.remove("show-de-flag-bg")}else{langToggleButton.innerHTML="&#127465;&#127466;";langToggleButton.classList.add("show-de-flag-bg");langToggleButton.classList.remove("show-us-flag-bg")}}try{localStorage.setItem("preferredLanguage",lang)}catch(e){console.error("Could not save language preference to localStorage.",e)}};const toggleLanguage=()=>{const currentLang=htmlElement.getAttribute("lang")||"en";const newLang=currentLang==="de"?"en":"de";setLanguage(newLang)};if(langToggleButton){langToggleButton.addEventListener("click",toggleLanguage)}else{console.warn("Language toggle button not found.")}let initialLang="en";try{const savedLang=localStorage.getItem("preferredLanguage");if(savedLang&&(savedLang==="de"||savedLang==="en")){initialLang=savedLang}}catch(e){console.error("Could not retrieve language preference from localStorage.",e)}setLanguage(initialLang);const menuToggle=document.querySelector(".mobile-menu-toggle");const mainNav=document.querySelector("#main-navigation");if(menuToggle&&mainNav){menuToggle.addEventListener("click",()=>{mainNav.classList.toggle("is-open");menuToggle.classList.toggle("is-active");const isExpanded=menuToggle.getAttribute("aria-expanded")==="true";menuToggle.setAttribute("aria-expanded",!isExpanded)});mainNav.querySelectorAll("a").forEach((link)=>{link.addEventListener("click",()=>{if(mainNav.classList.contains("is-open")){mainNav.classList.remove("is-open");menuToggle.classList.remove("is-active");menuToggle.setAttribute("aria-expanded","false")}})})}else{console.warn("Mobile menu toggle button or main navigation not found.")}const githubUser="NiiV3AU";const githubRepo="YMU";const textElementId="github-downloads";const badgeElementId="github-downloads-badge";const cacheKey=`github_downloads_${ githubUser }_${ githubRepo }`;const cacheDurationMinutes=60;async function displayGitHubDownloads(){const textElement=document.getElementById(textElementId);const badgeElement=document.getElementById(badgeElementId);if(!textElement||!badgeElement){console.error(`Elemente für Text (${ textElementId }) oder Badge (${ badgeElementId }) nicht gefunden.`);return}const showFallbackBadge=()=>{console.warn("Fallback to Badge activated.");textElement.style.display="none";badgeElement.src=`https://badgen.net/github/assets-dl/${ githubUser }/${ githubRepo }?label=&labelColor=black&color=black&cache=300`;badgeElement.style.display="inline"};const cachedData=sessionStorage.getItem(cacheKey);let totalDownloadsText="N/A";if(cachedData){try{const{count,timestamp}=JSON.parse(cachedData);const ageMinutes=(Date.now()-timestamp)/(1000*60);if(ageMinutes<cacheDurationMinutes){console.log("Using cached download count:",count);textElement.textContent=count.toLocaleString();textElement.style.display="inline";badgeElement.style.display="none";return}else{console.log("Cache expired.")}}catch(e){console.error("Error parsing cached data:",e)}}console.log("Fetching download count from GitHub API...");textElement.textContent="Lädt...";textElement.style.display="inline";badgeElement.style.display="none";const apiUrl=`https://api.github.com/repos/${ githubUser }/${ githubRepo }/releases`;try{const response=await fetch(apiUrl);if(!response.ok){console.error(`GitHub API Error: ${response.status } ${response.statusText }`);showFallbackBadge();return}const releases=await response.json();let currentTotal=0;if(releases&&releases.length>0){const latestRelease=releases[0];if(latestRelease.assets&&latestRelease.assets.length>0){latestRelease.assets.forEach((asset)=>{currentTotal+=asset.download_count})}totalDownloadsText=currentTotal.toLocaleString();try{sessionStorage.setItem(cacheKey,JSON.stringify({count:currentTotal,timestamp:Date.now()}));console.log("Saved download count to cache.")}catch(e){console.error("Error saving data to cache:",e)}}else{console.log("No releases found.");totalDownloadsText="N/A"}textElement.textContent=totalDownloadsText;textElement.style.display="inline";badgeElement.style.display="none"}catch(error){console.error("Network or other error fetching downloads:",error);showFallbackBadge()}}displayGitHubDownloads()});
